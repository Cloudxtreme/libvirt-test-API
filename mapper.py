#!/usr/bin/env python
#
# Copyright (C) 2010-2012 Red Hat, Inc.
#
# libvirt-test-API is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranties of
# TITLE, NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

#
#
# This module help form new lists from original list generated by module parser,
# the purpose is to get useful information about a testrun.
#

import copy

class Mapper(object):

    def __init__(self, testcases_list):
        self.testcases_list = testcases_list

    def module_casename_func_map(self):
        """ generate a new list of dictionary
            change key from module:casename to module:casename:func
        """
        tripped_cases_list = []
        prev_testcasename = ''
        prev_testcases_params = ''

        for testcase in self.testcases_list:
            tripped_case = {}
            testcase_name = testcase.keys()[0]
            if ":" in testcase_name:
                casename = testcase_name.split(":")[1]
                func = casename

            if testcase_name == 'sleep':
                tripped_cases_list.append(testcase)
                continue

            if testcase_name == 'clean':
                func = casename + "_clean"
                tripped_case[prev_testcasename + ":" + func] = prev_testcases_params
                tripped_cases_list.append(tripped_case)
                continue

            testcases_params = testcase.values()[0]
            tripped_case[testcase_name + ":" + func] = testcases_params
            tripped_cases_list.append(tripped_case)

            prev_testcasename = testcase_name
            prev_testcases_params = testcases_params

        return tripped_cases_list

    def module_casename_cleanfunc_map(self):
        """generate a new data format
           keys of dictionay are of module:casename:casename_clean
        """
        tripped_cases_list = []
        for testcase in self.testcases_list:
            tripped_case = {}
            testcase_name = testcase.keys()[0]
            if ":" in testcase_name:
                casename = testcase_name.split(":")[1]
                func = casename + "_clean"

            if testcase_name == 'sleep' or testcase_name == 'clean':
                continue

            testcases_params = testcase.values()[0]
            tripped_case[testcase_name + ":" + func] = testcases_params
            tripped_cases_list.append(tripped_case)

        return tripped_cases_list

<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<chapter id="libvirt-test-API-Integrating_into_Autotest">
  <title>Integrating libvirt-test-API into Autotest</title>
  
  <para>In libvirt-test-API test cases are designed as individual components which can be grouped together in a test run via a configuration file. Because test cases are stored individually, it is easy to integrate libvirt-test-API into other test harnesses such as Autotest.</para>
  
  <para>Integrating libvirt-test-API into Autotest requires:</para>
  <itemizedlist>
    <listitem>
      <para>A control file, for example <filename>/tests/libvirt/control</filename>.</para>
    </listitem>
    <listitem>
      <para>A test wrapper, for example <filename>/tests/libvirt/libvirt.py</filename>.</para>
    </listitem>
    <listitem>
      <para>The source code for the test.</para>
    </listitem>
  </itemizedlist>
  
  <note>
    <title>Naming convention</title>
    <para>The name of the sub-directory <filename>/tests/libivrt</filename>, the test wrapper <filename>libvirt.py</filename>, and the name of the class inside the test wrapper <filename>libvirt</filename> must all match.</para>
  </note>
  
  <procedure>
    <title>Integrating libvirt-test-API into Autotest</title>
    <para>To integrate libvirt-test-API into Autotest:</para>
    <step>
    	<para>Create a sub-directory under <filename>/tests</filename>. For example, <filename>/tests/libvirt</filename>.</para>
    	<para>This sub-directory is used to store the control file, test wrapper, and source code for the test.</para>
   	</step>
    <step>
      <para>Create a control file, named "control", to interface with Autotest.</para>
      <example>
        <title>Control file</title>
<screen>
AUTHOR = """
Author Name
"""       
DOC = """
Libvirt-test-API is a powerful test tool that provides a set of simple testing procedures specifically targeting libvirt API functionality.
"""
TIME = 'SHORT'
NAME = 'Libvirt test'
TEST_CLASS = 'Virtualization'
TEST_CATEGORY = 'Functional'
TEST_TYPE = 'client'

job.run_test('libvirt')
</screen>
      </example>
    </step>
    <step>
      <para>Create a test wrapper named "libvirt.py".</para>
      <para>Libvirt-test-API exists in the form of a tarball, therefore, most of what needs to be done is in the python wrapper. For example, extracting the tarball, setting environment variables, and so on. Autotest calls five functions defined in the wrapper:</para>
      <itemizedlist>
        <listitem>
          <para><command>initialize()</command> - This is run first, every time the test runs.</para>
        </listitem>
        <listitem>
          <para><command>setup()</command> - This is run the first time the test is used. It is normally used to compile the source code.</para>
        </listitem>
        <listitem>
          <para><command>run_once()</command> - This is called by <command>job.run_test N times</command>, where N is controlled by the iterations parameter to <command>run_test</command> (the default is one). It also gets called an additional time if any profilers are enabled.</para>
        </listitem>
        <listitem>
          <para><command>postprocess_iteration()</command> - This processes any results generated by the test iteration and writes them to a keyval file of 'key=value' pairs. It is generally not called for the profiling iteration as that may have different performance.</para>
        </listitem>
        <listitem>
          <para><command>postprocess()</command> - [DEPRECATED] This is called once to do post processing of test iterations after all iterations are complete. The recommended option is to use postprocess_iteration instead.</para>
        </listitem>
      </itemizedlist>
      
      <para>You can customize a wrapper to meet your testing target based on libvirt-test-API rules.</para>
    </step>
  </procedure>
  
  <para>Most of the information in this chapter is taken from the Autotest wiki. For more information on adding a test to Autotest, visit <ulink url ="http://autotest.kernel.org/wiki/AddingTest">Autotest - Adding a test</ulink>.</para>
  
</chapter>

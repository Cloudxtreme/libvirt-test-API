<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<chapter id="libvirt-test-API-Writing_a_test_case">
	<title>Writing a test case</title>

	<para>Test cases form the foundation of the test tool. They are the building blocks from which test runs can be created. Test cases are written as Python scripts and define the functions that can be tested. Separating test cases by function allows test cases to be re-used and combined in the configuration file to create the desired test run.</para>

	<para>The following section provides details on the test case file structure that must be used in order to be correctly accepted by the test tool.</para>


	<section id="Writing_a_test_case-Test_case_file_structure">
	  <title>Test case file structure</title>

	  <para><application>Filename</application></para>
	  <blockquote>
	    <para>The name of the test case file must be the same as the name of the main function inside it.</para>
	    <para>For example, if the main function is <application>install_guest()</application>, then test case file must be named <filename>install_guest.py</filename>.</para>
	    <para>Save the test case to its corresponding directory in <filename>/repos</filename>. For example, if the test case is related to domain then save the file in the <filename>/repos/domain</filename> directory.</para>
	  </blockquote>

    <para><application>Function</application></para>
    <blockquote>
      <para>The function requires a dictionary (dict) as the argument. The dict uses the function arguments defined in the configuration file.</para>
      <para>To write log information to a file, the function also requires a key value pair with the keyname 'logger' and the value is a log object.</para>
    </blockquote>

    <para><application>Return code</application></para>
    <blockquote>
      <para>The test case uses the following return codes:</para>
      <itemizedlist>
        <listitem>
          <para><application>0</application> = success</para>
        </listitem>
        <listitem>
          <para><application>1</application> = fail</para>
        </listitem>
      </itemizedlist>
    </blockquote>

    <example>
      <title>Test case file</title>
<programlisting>
#  install_guest.py
import time
import sys
import os

def install_guest(dict):
    logger = dict['logger']
    print "this is from testcase_repos:domain"
    for eachvargs in dict.keys():
        logger.info("the argu is %s" % eachvargs)
        time.sleep(1)
        logger.info("the corresponding value is %s" % dict[eachvargs])
    logger.info("I am from install_guest log info")
    logger.debug("I am from install_guest log debug")
    logger.warning("I am from install_guest log warning")
    logger.error("I am from install_guest log error")
    logger.critical("I am from install_guest log critical")
    return 0
</programlisting>
    </example>

  </section><!--End Test case file structure-->


  <section id="Writing_a_test_case-Test_case_example">
    <title>Test case example</title>

    <para>In this example, the test objective is to:</para>
    <orderedlist>
      <listitem>
        <para>Create a new NFS based storage pool and create a volume.</para>
      </listitem>
      <listitem>
        <para>Install a new rhel5u4 guest machine on the volume with multiprocess disabled and repeat the test once.</para>
      </listitem>
    </orderedlist>
    <para>To achieve the test objective, two test cases are required:</para>
    <orderedlist>
      <listitem>
        <para>Initialize the NFS based storage pool, the information of nfsserver is defined in the env.ini file.</para>
        <para>The storage test case is called 'initialize_storage' and is located in <filename>/repos/storage/initialize_storage.py</filename></para>
      </listitem>
      <listitem>
        <para>Install the guest on the volume.</para>
        <para>The install test case is called 'domain_install' and is located in <filename>/repos/domain/install_guest.py</filename></para>
      </listitem>
    </orderedlist>
    <para>The two test case are independent of each other, which allows the test cases to be re-used and combined with other test cases to create different test runs.</para>

    <para>Below is the configuration file, which includes the two test cases.</para>
    <example>
      <title>Configuration file <filename>case.conf</filename></title>
<programlisting>
storage:initialize_storage
    poolname
         nfspool
    pooltype
         netfs
    volname
         rhel5u4.img
    volformat
         raw

domain:install_guest
    guestname
        rhel5u4
    guesttype
        xenfv
    memory
        1048576
    vcpu
        1

options multiprocess=disable times=1
</programlisting>
    </example>

    <para>Below are the two test case scripts.</para>
    <example>
      <title>Initialize storage test case <filename>/repos/storage/initialize_storage.py</filename></title>
<programlisting>
#!/usr/bin/env python

import sys
import os
import time
import copy
import shutil
import urllib
import commands

dir = os.path.dirname(sys.modules[__name__].__file__)
absdir = os.path.abspath(dir)
rootdir = os.path.split(os.path.split(absdir)[0])[0]
sys.path.append(rootdir)

import exception
from lib import connectAPI
from lib import storageAPI
from utils import env_parser
from utils import xmlbuilder

envfile = 'env.ini'

def initialize_storage(dict):
    logger = dict['logger']
    dict['hypertype'] = 'xen'
    envparser = env_parser.Envpaser(envfile)
    dict['sourcename'] = envparser.get_value('storage', 'sourcename')
    dict['sourcepath'] = envparser.get_value('storage', 'sourcepath')

    logger.info('prepare create storage pool')
    xmlobj = xmlbuilder.XmlBuilder()
    poolxml = xmlobj.build_pool(dict)
    logger.debug('dump create storage pool xml:\n%s' %poolxml)

    conn = connectAPI.ConnectAPI.open("xen:///")
    stgobj = storageAPI.StorageAPI(conn)

    logger.info('list current storage pool: %s' %stgobj.storage_pool_list())
    logger.info('define pool from xml description')
    stgobj.define_storage_pool(poolxml)

    logger.info('active storage pool')
    stgobj.active_storage_pool(dict['poolname'])
    logger.info('list current storage pool: %s' %stgobj.storage_pool_list())

    volxml = xmlobj.build_volume(dict)
    logger.debug('dump create storage volume xml:\n%s' %volxml)
    logger.info('prepare create storage volume')
    stgobj.create_storage_volume(dict['poolname'], volxml)
    logger.info('list current storage volume: %s' %stgobj.get_volume_list(dict['poolname']))

    return 0
</programlisting>
    </example>

    <example>
      <title>Install guest test case <filename>/repos/domain/install_guest.py</filename></title>
<programlisting>
#!/usr/bin/env python

import sys
import os
import time
import copy
import shutil
import urllib
import commands

dir = os.path.dirname(sys.modules[__name__].__file__)
absdir = os.path.abspath(dir)
rootdir = os.path.split(os.path.split(absdir)[0])[0]
sys.path.append(rootdir)

import exception
from lib import connectAPI
from lib import domainAPI
from utils import env_parser
from utils import xmlbuilder

envfile = 'env.ini'

def prepare_cdrom(*args):
    url, ks, gname, logger = args
    ks_name = os.path.basename(ks)

    new_dir = os.path.join('/tmp', gname)
    os.makedirs(new_dir)

    boot_path = os.path.join(url, 'images/boot.iso')
    boot_iso = urllib.urlretrieve(boot_path, 'boot.iso')[0]
    time.sleep(10)
    shutil.move(boot_iso, new_dir)

    ks_file = urllib.urlretrieve(ks, ks_name)[0]
    shutil.move(ks_file, new_dir)

    shutil.copy('utils/ksiso.sh', new_dir)
    src_path = os.getcwd()
    os.chdir(new_dir)
    shell_cmd = 'sh ksiso.sh %s' %ks_file
    (status, text) = commands.getstatusoutput(shell_cmd)
    if status != 0:
        logger.debug(text)
    os.chdir(src_path)

def install_guest(dict):
    logger = dict['logger']
    gname = dict['guestname']
    dict['ifacetype'] = 'bridge'
    dict['bridge'] = 'xenbr0'
    dict['bootcd'] = '/tmp/%s/custom.iso' %gname

    logger.info('get system environment information')
    envparser = env_parser.Envpaser(envfile)
    url = envparser.get_value("guest", gname + "src")
    dict['kickstart'] = envparser.get_value("guest", gname + "ks")
    logger.debug('install source: \n    %s' %url)
    logger.debug('kisckstart file: \n    %s' %dict['kickstart'])

    logger.info('prepare installation booting cdrom')
    prepare_cdrom(url, dict['kickstart'], gname, logger)

    xmlobj = xmlbuilder.XmlBuilder()
    guestinstxml = xmlobj.build_domain_install(dict)
    logger.debug('dump installation guest xml:\n%s' %guestinstxml)

    conn = connectAPI.ConnectAPI.open("xen:///")
    domobj = domainAPI.DomainAPI(conn)
    logger.info('define guest from xml description')
    domobj.define_domain(guestinstxml)

    logger.info('start installation guest ...')
    domobj.start_domain(gname)

    state = domobj.get_domain_state(gname)
    logger.debug('current guest state: %s' %state)
</programlisting>
    </example>

    <para>Below is the environment configuration file.</para>
    <example>
      <title>Environment configuration file <filename>env.ini</filename></title>
<programlisting>
[guest]
rhel5u4src = http://redhat.com/pub/rhel/rel-eng/RHEL5.4-Server-latest/tree-x86_64
rhel5u4ks = http://10.00.00.01/ks-rhel-5.4-x86_64-noxen-smp-minimal.cfg

[storage]
sourcename = 10.00.00.02
sourcepath = /media/share
</programlisting>
    </example>

    <para>Below is the log file that is generated. It is stored in <filename>/log</filename>.</para>
    <example>
      <title>Test case log file</title>
      <programlisting>
        <xi:include parse="text" href="extras/log.txt" xmlns:xi="http://www.w3.org/2001/XInclude" />
      </programlisting>
    </example>

    <para>This example shows how simple it is to create two test cases to achieve a complex test. The advantage of combining test cases to produce a complex test is that the test cases can be used repeatedly across other tests.</para>

  </section><!-- End Test case example-->

</chapter>
